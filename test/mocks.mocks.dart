// Mocks generated by Mockito 5.4.5 from annotations
// in movie_test_app/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:ui' as _i12;

import 'package:get/get.dart' as _i5;
import 'package:get/get_state_manager/src/simple/list_notifier.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movie_test_app/core/utils/pair.dart' as _i2;
import 'package:movie_test_app/domain/entities/detail_movie.dart' as _i3;
import 'package:movie_test_app/domain/entities/home_movie_item.dart' as _i8;
import 'package:movie_test_app/domain/entities/search_movie_item.dart' as _i9;
import 'package:movie_test_app/domain/repository/movie_repository.dart' as _i6;
import 'package:movie_test_app/domain/usecases/get_favorite_movie.dart' as _i4;
import 'package:movie_test_app/features/favorites/controller/favorites_screen_controller.dart'
    as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePair_0<T1, T2> extends _i1.SmartFake implements _i2.Pair<T1, T2> {
  _FakePair_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDetailMovie_1 extends _i1.SmartFake implements _i3.DetailMovie {
  _FakeDetailMovie_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetFavoriteMovie_2 extends _i1.SmartFake
    implements _i4.GetFavoriteMovie {
  _FakeGetFavoriteMovie_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRxList_3<E> extends _i1.SmartFake implements _i5.RxList<E> {
  _FakeRxList_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInternalFinalCallback_4<T> extends _i1.SmartFake
    implements _i5.InternalFinalCallback<T> {
  _FakeInternalFinalCallback_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i6.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Pair<int, List<_i8.HomeMovieItem>>> getNowPlayingMovies(
          {int? page = 1}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNowPlayingMovies,
          [],
          {#page: page},
        ),
        returnValue: _i7.Future<_i2.Pair<int, List<_i8.HomeMovieItem>>>.value(
            _FakePair_0<int, List<_i8.HomeMovieItem>>(
          this,
          Invocation.method(
            #getNowPlayingMovies,
            [],
            {#page: page},
          ),
        )),
      ) as _i7.Future<_i2.Pair<int, List<_i8.HomeMovieItem>>>);

  @override
  _i7.Future<_i3.DetailMovie> getDetailMovie({required int? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDetailMovie,
          [],
          {#id: id},
        ),
        returnValue: _i7.Future<_i3.DetailMovie>.value(_FakeDetailMovie_1(
          this,
          Invocation.method(
            #getDetailMovie,
            [],
            {#id: id},
          ),
        )),
      ) as _i7.Future<_i3.DetailMovie>);

  @override
  _i7.Future<_i2.Pair<int, List<_i9.SearchMovieItem>>> searchMovies({
    int? page = 1,
    required String? query,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMovies,
          [],
          {
            #page: page,
            #query: query,
          },
        ),
        returnValue: _i7.Future<_i2.Pair<int, List<_i9.SearchMovieItem>>>.value(
            _FakePair_0<int, List<_i9.SearchMovieItem>>(
          this,
          Invocation.method(
            #searchMovies,
            [],
            {
              #page: page,
              #query: query,
            },
          ),
        )),
      ) as _i7.Future<_i2.Pair<int, List<_i9.SearchMovieItem>>>);

  @override
  void toogleMovieFavorite({required _i3.DetailMovie? movie}) =>
      super.noSuchMethod(
        Invocation.method(
          #toogleMovieFavorite,
          [],
          {#movie: movie},
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i3.DetailMovie> getFavoriteMovies() => (super.noSuchMethod(
        Invocation.method(
          #getFavoriteMovies,
          [],
        ),
        returnValue: <_i3.DetailMovie>[],
      ) as List<_i3.DetailMovie>);

  @override
  bool isMovieFavorite({required int? id}) => (super.noSuchMethod(
        Invocation.method(
          #isMovieFavorite,
          [],
          {#id: id},
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [FavoritesScreenController].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoritesScreenController extends _i1.Mock
    implements _i10.FavoritesScreenController {
  MockFavoritesScreenController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GetFavoriteMovie get getFavoriteMovie => (super.noSuchMethod(
        Invocation.getter(#getFavoriteMovie),
        returnValue: _FakeGetFavoriteMovie_2(
          this,
          Invocation.getter(#getFavoriteMovie),
        ),
      ) as _i4.GetFavoriteMovie);

  @override
  _i5.RxList<_i3.DetailMovie> get movies => (super.noSuchMethod(
        Invocation.getter(#movies),
        returnValue: _FakeRxList_3<_i3.DetailMovie>(
          this,
          Invocation.getter(#movies),
        ),
      ) as _i5.RxList<_i3.DetailMovie>);

  @override
  set movies(_i5.RxList<_i3.DetailMovie>? _movies) => super.noSuchMethod(
        Invocation.setter(
          #movies,
          _movies,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.InternalFinalCallback<void> get onStart => (super.noSuchMethod(
        Invocation.getter(#onStart),
        returnValue: _FakeInternalFinalCallback_4<void>(
          this,
          Invocation.getter(#onStart),
        ),
      ) as _i5.InternalFinalCallback<void>);

  @override
  _i5.InternalFinalCallback<void> get onDelete => (super.noSuchMethod(
        Invocation.getter(#onDelete),
        returnValue: _FakeInternalFinalCallback_4<void>(
          this,
          Invocation.getter(#onDelete),
        ),
      ) as _i5.InternalFinalCallback<void>);

  @override
  bool get initialized => (super.noSuchMethod(
        Invocation.getter(#initialized),
        returnValue: false,
      ) as bool);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  int get listeners => (super.noSuchMethod(
        Invocation.getter(#listeners),
        returnValue: 0,
      ) as int);

  @override
  void onInit() => super.noSuchMethod(
        Invocation.method(
          #onInit,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void fetchFavoriteMovies() => super.noSuchMethod(
        Invocation.method(
          #fetchFavoriteMovies,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void update([
    List<Object>? ids,
    bool? condition = true,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #update,
          [
            ids,
            condition,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onReady() => super.noSuchMethod(
        Invocation.method(
          #onReady,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onClose() => super.noSuchMethod(
        Invocation.method(
          #onClose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void $configureLifeCycle() => super.noSuchMethod(
        Invocation.method(
          #$configureLifeCycle,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Disposer addListener(_i11.GetStateUpdate? listener) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValue: () {},
      ) as _i11.Disposer);

  @override
  void removeListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void refresh() => super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void refreshGroup(Object? id) => super.noSuchMethod(
        Invocation.method(
          #refreshGroup,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyChildrens() => super.noSuchMethod(
        Invocation.method(
          #notifyChildrens,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListenerId(
    Object? id,
    _i12.VoidCallback? listener,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #removeListenerId,
          [
            id,
            listener,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Disposer addListenerId(
    Object? key,
    _i11.GetStateUpdate? listener,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListenerId,
          [
            key,
            listener,
          ],
        ),
        returnValue: () {},
      ) as _i11.Disposer);

  @override
  void disposeId(Object? id) => super.noSuchMethod(
        Invocation.method(
          #disposeId,
          [id],
        ),
        returnValueForMissingStub: null,
      );
}
